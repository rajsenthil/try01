package com.senthil.presto.coding.dao;

import com.senthil.presto.coding.beans.Item;
import com.senthil.presto.coding.beans.Menu;
import com.senthil.presto.coding.beans.MenuType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.NotFoundException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class H2MenuDao {

    private Logger logger = LoggerFactory.getLogger(H2MenuDao.class.getName());
    private String INSERT_MENU = "INSERT INTO Menu (RESTAURANT_ID, NAME, MENU_TYPE) values (?, ?, ?)";
    private String INSERT_MENU_ITEM = "INSERT INTO Item (MENU_ID, NAME, MODIFIER, PARENT_ID) values (?, ?, ?, ?)";

    private String SELECT_MENU = "SELECT * FROM Menu WHERE id = ";

    private String SELECT_ITEM_QUERY_1 = "WITH LINK(ID, MENU_ID, NAME, MODIFIER, PARENT_ID) AS (\n" +
            "    SELECT ID, MENU_ID, NAME, MODIFIER, 0 FROM ITEM WHERE PARENT_ID = 0 AND MENU_ID = ";
    private String SELECT_ITEM_QUERY_2 = "\n    UNION ALL\n" +
            "    SELECT ITEM.ID, ITEM.MENU_ID, ITEM.NAME, ITEM.MODIFIER, ITEM.PARENT_ID\n" +
            "    FROM LINK INNER JOIN ITEM ON LINK.ID = ITEM.PARENT_ID\n" +
            "    WHERE ITEM.MENU_ID = ";
    private String SELECT_ITEM_QUERY_3 =         "\n)\n" +
            "SELECT ID, MENU_ID, NAME, MODIFIER, PARENT_ID FROM LINK ORDER BY ID;";

    public Menu getMenu(int id, String type) {

        return new Menu();
    }

    public void executeStatement(String sql) throws Exception{
        Statement statement = getConnection().createStatement();
        statement.execute(sql);
    }

    public int insertMenu(Menu menu) throws Exception {
        PreparedStatement ps = getConnection().prepareStatement(INSERT_MENU, Statement.RETURN_GENERATED_KEYS);
        ps.setInt(1, menu.getRestaurantId());
        ps.setString(2, menu.getName());
        ps.setString(3, menu.getMenuType().name());
        ps.executeUpdate();

        ResultSet tableKeys = ps.getGeneratedKeys();
        tableKeys.next();
        int autoGeneratedID = tableKeys.getInt(1);
        return autoGeneratedID;
    }

    public void insertMenuItem(Item root, int menuId, int parentId) throws Exception {
        PreparedStatement ps = getConnection().prepareStatement(INSERT_MENU_ITEM, Statement.RETURN_GENERATED_KEYS);
        ps.setInt(1, menuId);
        ps.setString(2, root.getName());
        ps.setString(3, root.isModifier()? "Y": "N");
        ps.setInt(4, parentId);
        ps.executeUpdate();

        ResultSet tableKeys = ps.getGeneratedKeys();
        tableKeys.next();
        int autoGeneratedID = tableKeys.getInt(1);
        logger.info("Inserted the item# {}", autoGeneratedID);

        Set<Item> items = root.getModifiers();

        //Recursively call the menu item insertion
        if (items != null && items.size() > 0) {
            for (Item item : items) insertMenuItem(item, menuId, autoGeneratedID);
        }
    }

    public Menu getMenu(int menuId) throws Exception {
        Statement statement = getConnection().createStatement();
        ResultSet rs = statement.executeQuery(SELECT_MENU+menuId);
        if (!rs.next()) throw new NotFoundException("Menu id "+menuId+" not found");
        Menu menu = new Menu();
        //RESTAURANT_ID, NAME, MENU_TYPE
        menu.setId(rs.getInt(1));
        menu.setRestaurantId(rs.getInt(2));
        menu.setName(rs.getString(3));
        menu.setMenuType(MenuType.valueOf(rs.getString(4)));

        logger.info("ID:{}, restaurantId:{}, Name:{}, MenuType:{}", menu.getId(), menu.getRestaurantId(), menu.getName(), menu.getMenuType());
        menu.setItem(items(menuId));
        return menu;
    }

    public Item items(int menuId) throws Exception {
        String SELECT_ITEM_QUERY = SELECT_ITEM_QUERY_1 + menuId +SELECT_ITEM_QUERY_2 + menuId + SELECT_ITEM_QUERY_3;
        Statement statement = getConnection().createStatement();
        ResultSet rs = statement.executeQuery(SELECT_ITEM_QUERY);
        Map<Integer, Item> itemMap = new TreeMap();
        Item root = null;
        int currParentId = -1;
        if (rs.next()) {
            root = new Item();
            root.setId(rs.getInt(1));
            root.setName(rs.getString(3));
            root.setModifier(rs.getString(4) == "Y" ? true : false);
            currParentId = rs.getInt(5);
            itemMap.put(root.getId(), root);
        }
        Set<Item> modifiers = null;
        while (rs.next()) {
            //ID, MENU_ID, NAME, MODIFIER, PARENT_ID
            Item item = new Item();
            item.setId(rs.getInt(1));
            item.setName(rs.getString(3));
            item.setModifier(rs.getString(4) == "Y" ? true : false);
            int parentId = rs.getInt(5);
            if (currParentId != parentId) {
                modifiers = itemMap.get(parentId).getModifiers();
                if (modifiers == null){
                    modifiers = new HashSet();
                    itemMap.get(parentId).setModifiers(modifiers);
                }
                currParentId = parentId;
            }
            itemMap.put(item.getId(), item);
            modifiers.add(item);
            logger.info("ID:{}, MENU_ID:{}, NAME:{}, MODIFIER:{}, PARENT_ID:{}", item.getId(), menuId, item.getName(), item.isModifier(), parentId);
        }

        return root;
    }

    Connection getConnection() {
        Connection conn = null;
        try {
            Class.forName("org.h2.Driver");
            conn = DriverManager.getConnection("jdbc:h2:tcp://127.0.1.1:9092/~/menu", "sa", "");
            logger .info("Connection Established: "+ conn.getMetaData().getDatabaseProductName() + "/" + conn.getCatalog());
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
        }
        return conn;
    }
}
